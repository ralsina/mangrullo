{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mangrullo","text":"<p>Mangrullo is a Docker container update automation tool written in Crystal. It monitors running Docker containers and automatically updates them to newer image versions, similar to Watchtower but with a focus on simplicity and reliability.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udd0d Automatic Monitoring: Continuously monitors running Docker containers for image updates</li> <li>\ud83d\udce6 Semantic Versioning: Intelligent version comparison with support for major/minor/patch updates</li> <li>\ud83d\udee1\ufe0f Safe Updates: Optional control over major version upgrades to prevent breaking changes</li> <li>\ud83c\udfc3 Dry Run Mode: Test what would be updated without making actual changes</li> <li>\ud83d\udcca Detailed Logging: Comprehensive logging with configurable log levels</li> <li>\ud83d\udd04 Flexible Scheduling: Run once or set up continuous monitoring with custom intervals</li> <li>\ud83d\udd27 Easy Configuration: Simple command-line interface with sensible defaults</li> <li>\ud83c\udfaf Container Filtering: Check specific containers by name instead of all containers</li> <li>\ud83d\udd04 Container Recreation: Properly recreates containers with new images (like Watchtower)</li> <li>\ud83c\udf10 Multi-Registry Support: Works with Docker Hub, GitHub Container Registry, and more</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#from-source","title":"From Source","text":"<ol> <li>Install Crystal (&gt;= 1.16.3) following the official installation guide</li> <li>Clone the repository:    <code>bash    git clone https://github.com/ralsina/mangrullo.git    cd mangrullo</code></li> <li>Install dependencies:    <code>bash    shards install</code></li> <li>Build the project:    <code>bash    shards build</code></li> <li>Install the binary (optional):    <code>bash    cp bin/mangrullo /usr/local/bin/</code></li> </ol>"},{"location":"#using-docker","title":"Using Docker","text":"<pre><code>docker run -d \\\n  --name mangrullo \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  ralsina/mangrullo:latest\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Monitor running containers and update them when new images are available:</p> <pre><code># Run once and exit\nmangrullo --once\n\n# Run continuously with 5-minute intervals\nmangrullo --interval=300\n\n# Allow major version upgrades\nmangrullo --allow-major\n\n# Dry run to see what would be updated\nmangrullo --dry-run\n</code></pre>"},{"location":"#command-line-options","title":"Command Line Options","text":"<pre><code>Usage:\n  mangrullo [--interval=&lt;seconds&gt;] [--allow-major] [--socket=&lt;path&gt;]\n           [--log-level=&lt;level&gt;] [--once] [--dry-run] [&lt;container-name&gt;...]\n           [--help] [--version]\n\nOptions:\n  --interval=&lt;seconds&gt;   Check interval in seconds [default: 300]\n  --allow-major          Allow major version upgrades\n  --socket=&lt;path&gt;        Docker socket path [default: /var/run/docker.sock]\n  --log-level=&lt;level&gt;    Log level (debug, info, warn, error) [default: info]\n  --once                 Run once and exit\n  --dry-run              Show what would be updated without actually updating\n  --help                 Show this help message\n  --version              Show version information\n\nArguments:\n  &lt;container-name&gt;       Specific container names to check (if not specified, checks all containers)\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Check for updates once:</p> <pre><code>mangrullo --once\n</code></pre> <p>Monitor every 10 minutes with debug logging:</p> <pre><code>mangrullo --interval=600 --log-level=debug\n</code></pre> <p>Test updates including major versions:</p> <pre><code>mangrullo --dry-run --allow-major\n</code></pre> <p>Check only specific containers:</p> <pre><code>mangrullo --once flatnotes atuin radicale\n</code></pre> <p>Check specific containers (with or without leading slash):</p> <pre><code>mangrullo --once /flatnotes atuin /radicale\n</code></pre> <p>Use custom Docker socket:</p> <pre><code>mangrullo --socket=/path/to/docker.sock\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Mangrullo is configured primarily through command-line arguments. There are no configuration files or environment variables to manage.</p>"},{"location":"#docker-socket","title":"Docker Socket","text":"<p>By default, Mangrullo connects to the Docker daemon at <code>/var/run/docker.sock</code>. You can specify a different path using the <code>--socket</code> option.</p>"},{"location":"#version-handling","title":"Version Handling","text":"<p>Mangrullo uses semantic versioning to determine when updates are available:</p> <ul> <li>Patch updates (1.0.0 \u2192 1.0.1): Always applied by default</li> <li>Minor updates (1.0.0 \u2192 1.1.0): Always applied by default  </li> <li>Major updates (1.0.0 \u2192 2.0.0): Only applied when <code>--allow-major</code> is specified</li> </ul>"},{"location":"#image-support","title":"Image Support","text":"<p>Mangrullo works with: - Standard image tags (nginx:1.2.3) - Registry prefixes (docker.io/library/nginx:1.2.3) - SHA256 digests (skipped for version comparison) - Latest tags (always check for updates) - Multiple registries:   - Docker Hub (registry-1.docker.io)   - GitHub Container Registry (ghcr.io)   - LinuxServer.io (lscr.io - maps to ghcr.io/linuxserver/)   - Other standard Docker registry v2 implementations</p>"},{"location":"#development","title":"Development","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Crystal &gt;= 1.16.3</li> <li>Docker (for testing)</li> <li>Git</li> </ul>"},{"location":"#setup","title":"Setup","text":"<ol> <li> <p>Clone the repository:    <code>bash    git clone https://github.com/ralsina/mangrullo.git    cd mangrullo</code></p> </li> <li> <p>Install dependencies:    <code>bash    shards install</code></p> </li> <li> <p>Run tests:    <code>bash    crystal spec</code></p> </li> <li> <p>Build the project:    <code>bash    shards build</code></p> </li> </ol>"},{"location":"#running-tests","title":"Running Tests","text":"<p>The project includes comprehensive unit tests:</p> <pre><code># Run all tests\ncrystal spec\n\n# Run specific test file\ncrystal spec spec/mangrullo_spec.cr\n\n# Run with verbose output\ncrystal spec --verbose\n</code></pre> <p>The test suite covers: - Container name matching and filtering - Registry mapping and authentication - Container recreation logic - Version parsing and comparison - Image update detection algorithms</p>"},{"location":"#code-style","title":"Code Style","text":"<ul> <li>Follow Crystal language conventions</li> <li>Use 2-space indentation</li> <li>Module names are CamelCase</li> <li>Constants are UPPER_SNAKE_CASE</li> <li>Method names are snake_case</li> </ul> <p>Format code with:</p> <pre><code>crystal tool format\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>Mangrullo is built with a modular architecture:</p> <ul> <li>Types (<code>src/types.cr</code>): Core data structures and version comparison logic</li> <li>Docker Client (<code>src/docker_client.cr</code>): Docker API wrapper and container recreation</li> <li>Image Checker (<code>src/image_checker.cr</code>): Version checking and update detection</li> <li>Update Manager (<code>src/update_manager.cr</code>): Coordinates the update process with container filtering</li> <li>Configuration (<code>src/config.cr</code>): Command-line argument parsing</li> <li>CLI (<code>src/cli.cr</code>): Main command-line interface</li> <li>Web Server (<code>src/web_server.cr</code>): Web interface (optional)</li> <li>Web Views (<code>src/web_views.cr</code>): Web interface templates</li> <li>Error Handling (<code>src/error_handling.cr</code>): Centralized error management</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.</p>"},{"location":"#development-workflow","title":"Development Workflow","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li> <li>Make your changes</li> <li>Add tests for new functionality</li> <li>Ensure all tests pass (<code>crystal spec</code>)</li> <li>Format your code (<code>crystal tool format</code>)</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin my-new-feature</code>)</li> <li>Create a new Pull Request</li> </ol>"},{"location":"#reporting-issues","title":"Reporting Issues","text":"<p>Please use the GitHub Issues page to report bugs or request features.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Inspired by Watchtower</li> <li>Built with Crystal</li> <li>Uses the docr Docker client library</li> <li>Uses docopt.cr for command-line parsing</li> </ul>"},{"location":"#changelog","title":"Changelog","text":""},{"location":"#v010","title":"v0.1.0","text":"<ul> <li>Initial release</li> <li>Basic container monitoring and update functionality</li> <li>Semantic version comparison</li> <li>Major version upgrade control</li> <li>Dry run mode</li> <li>Comprehensive unit tests</li> <li>Command-line interface</li> <li>Container-specific filtering (check only specified containers)</li> <li>Container recreation (properly updates containers with new images)</li> <li>Multi-registry support (Docker Hub, GHCR, lscr.io)</li> <li>Web interface framework (Kemal-based)</li> <li>Flexible container name matching (handles both \"name\" and \"/name\")</li> <li>Comprehensive error handling and logging</li> </ul>"},{"location":"CLAUDE/","title":"CLAUDE.md","text":"<p>This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.</p>"},{"location":"CLAUDE/#project-overview","title":"Project Overview","text":"<p>This is a Crystal Language project called \"mangrullo\" - a Docker container update automation tool similar to Watchtower. The project is functional and includes container monitoring, update detection, container recreation, and filtering capabilities. It follows standard Crystal conventions with comprehensive tests and a modular architecture.</p>"},{"location":"CLAUDE/#development-commands","title":"Development Commands","text":""},{"location":"CLAUDE/#building-and-running","title":"Building and Running","text":"<ul> <li><code>crystal build src/mangrullo.cr</code> - Compile the CLI</li> <li><code>crystal build src/web.cr</code> - Compile the web interface</li> <li><code>crystal run src/mangrullo.cr</code> - Run the CLI</li> <li><code>crystal run src/web.cr</code> - Run the web interface</li> <li><code>crystal tool format</code> - Format code according to Crystal style guidelines</li> </ul>"},{"location":"CLAUDE/#testing","title":"Testing","text":"<ul> <li><code>crystal spec</code> - Run all tests (56 examples)</li> <li><code>crystal spec spec/mangrullo_spec.cr</code> - Run main test file</li> <li><code>crystal spec --verbose</code> - Run tests with detailed output</li> </ul>"},{"location":"CLAUDE/#dependencies","title":"Dependencies","text":"<ul> <li><code>shards install</code> - Install dependencies from shard.yml</li> <li><code>shards build</code> - Build all targets using shards</li> <li><code>shards build mangrullo</code> - Build CLI target</li> <li><code>shards build mangrullo-web</code> - Build web interface target</li> </ul>"},{"location":"CLAUDE/#project-structure","title":"Project Structure","text":""},{"location":"CLAUDE/#source-files","title":"Source Files","text":"<ul> <li><code>src/mangrullo.cr</code> - Main CLI entry point</li> <li><code>src/cli.cr</code> - CLI interface and main loop</li> <li><code>src/config.cr</code> - Configuration management using Docopt</li> <li><code>src/types.cr</code> - Core data structures and version comparison</li> <li><code>src/docker_client.cr</code> - Docker API wrapper and container operations</li> <li><code>src/image_checker.cr</code> - Image update detection and registry access</li> <li><code>src/update_manager.cr</code> - Update coordination with container filtering</li> <li><code>src/web.cr</code> - Web interface entry point</li> <li><code>src/web_server.cr</code> - Kemal web server implementation</li> <li><code>src/web_views.cr</code> - Web interface templates</li> <li><code>src/error_handling.cr</code> - Centralized error management</li> </ul>"},{"location":"CLAUDE/#configuration","title":"Configuration","text":"<ul> <li><code>shard.yml</code> - Project dependencies and build targets</li> <li><code>spec/mangrullo_spec.cr</code> - Comprehensive test suite (56 examples)</li> <li><code>spec/spec_helper.cr</code> - Test configuration</li> </ul>"},{"location":"CLAUDE/#key-features-implemented","title":"Key Features Implemented","text":"<ul> <li>Container Monitoring: Automatically detects running Docker containers</li> <li>Update Detection: Compares local and remote image versions/digests</li> <li>Container Filtering: Check specific containers by name with flexible matching</li> <li>Container Recreation: Properly recreates containers with new images (like Watchtower)</li> <li>Multi-Registry Support: Docker Hub, GHCR, lscr.io (with proper mapping)</li> <li>Semantic Versioning: Intelligent version comparison with major upgrade control</li> <li>Dry Run Mode: Test updates without making changes</li> <li>Web Interface: Optional web-based monitoring and management</li> <li>Comprehensive Testing: Unit tests for all major functionality</li> </ul>"},{"location":"CLAUDE/#code-style","title":"Code Style","text":"<p>Follow Crystal Language conventions: - Use 2-space indentation - Module names are CamelCase - Constants are UPPER_SNAKE_CASE - Method names are snake_case - Use <code>crystal tool format</code> for formatting - Avoid <code>not_nil!</code> - use proper nilable handling - Prefer <code>unless</code> over <code>if !</code> for negative conditions</p>"},{"location":"CLAUDE/#current-state","title":"Current State","text":"<p>The project is fully functional with: - Complete CLI implementation with all planned features - Container recreation that properly updates containers (not just restart) - Flexible container name matching (handles both \"name\" and \"/name\") - Comprehensive test suite (56 examples, 0 failures) - Web interface framework in place - Multi-registry support with authentication - Proper error handling and logging</p>"},{"location":"CLAUDE/#dependencies_1","title":"Dependencies","text":"<p>From <code>shard.yml</code>: - <code>docr</code> - Docker API client - <code>docopt</code> - Command-line parsing - <code>kemal</code> - Web framework - <code>kilt</code> - Template engine</p>"},{"location":"CLAUDE/#crystal-version","title":"Crystal Version","text":"<p>This project requires Crystal &gt;= 1.16.3 (developed with Crystal 1.17.1).</p>"},{"location":"DESIGN/","title":"Mangrullo Design Document","text":""},{"location":"DESIGN/#overview","title":"Overview","text":"<p>Mangrullo is a Crystal implementation of a Watchtower-like Docker container update automation tool.</p>"},{"location":"DESIGN/#core-features","title":"Core Features","text":"<ul> <li>Monitor running Docker containers and their image versions</li> <li>Check for new image versions</li> <li>Calculate if updates are needed (with major version upgrade control)</li> <li>Perform graceful container recreation with new images (like Watchtower)</li> <li>Container-specific filtering (check only specified containers)</li> <li>Flexible container name matching (handles both \"name\" and \"/name\")</li> <li>Multi-registry support with authentication</li> </ul>"},{"location":"DESIGN/#architecture","title":"Architecture","text":""},{"location":"DESIGN/#dependencies","title":"Dependencies","text":"<ul> <li><code>marghidanu/docr</code> - Docker API client for Crystal</li> <li><code>ralsina/docopt.cr</code> - Command line argument parsing</li> <li><code>kemalcr/kemal</code> - Web framework (for web interface)</li> <li><code>jeromegn/kilt</code> - Template engine (for web interface)</li> <li>Standard Crystal library for HTTP, JSON, logging</li> </ul>"},{"location":"DESIGN/#core-modules","title":"Core Modules","text":""},{"location":"DESIGN/#1-mangrullodockerclient","title":"1. Mangrullo::DockerClient","text":"<ul> <li>Purpose: Interface with Docker daemon</li> <li>Responsibilities:</li> <li>Connect to Docker socket</li> <li>List running containers</li> <li>Get container details (image, labels, etc.)</li> <li>Pull images</li> <li>Container recreation (stop, remove, create, start)</li> <li>Container configuration preservation</li> <li>Key Methods:</li> <li><code>running_containers</code></li> <li><code>get_container_info(id : String)</code></li> <li><code>pull_image(image_name : String, tag : String)</code></li> <li><code>recreate_container_with_new_image(container_id : String, new_image : String)</code></li> <li><code>stop_container(container_id : String)</code></li> <li><code>remove_container(container_id : String)</code></li> <li><code>create_container_from_inspect_data(image_name : String, container_name : String, inspect_data : String)</code></li> </ul>"},{"location":"DESIGN/#2-mangrulloimagechecker","title":"2. Mangrullo::ImageChecker","text":"<ul> <li>Purpose: Check for image updates</li> <li>Responsibilities:</li> <li>Compare local and remote image digests</li> <li>Handle major version upgrade logic</li> <li>Multi-registry support with authentication</li> <li>Registry mapping (lscr.io \u2192 ghcr.io)</li> <li>Determine if update is needed</li> <li>Key Methods:</li> <li><code>needs_update?(container : ContainerInfo, allow_major_upgrade : Bool) : Bool</code></li> <li><code>get_remote_image_digest(image_name : String) : String?</code></li> <li><code>get_local_image_digest(image_name : String) : String?</code></li> <li><code>get_image_update_info(image_name : String)</code></li> <li><code>extract_version_from_image(image_name : String) : Version?</code></li> <li><code>get_update_status(container : ContainerInfo)</code></li> </ul>"},{"location":"DESIGN/#3-mangrulloupdatemanager","title":"3. Mangrullo::UpdateManager","text":"<ul> <li>Purpose: Coordinate the update process</li> <li>Responsibilities:</li> <li>Main update workflow with container recreation</li> <li>Container filtering and flexible name matching</li> <li>Handle update scheduling</li> <li>Logging and error handling</li> <li>Dry run functionality</li> <li>Key Methods:</li> <li><code>check_and_update_containers(allow_major_upgrade : Bool = false, container_names : Array(String) = [] of String)</code></li> <li><code>update_container(container : ContainerInfo, allow_major_upgrade : Bool = false)</code></li> <li><code>get_containers_needing_update(allow_major_upgrade : Bool = false, container_names : Array(String) = [] of String)</code></li> <li><code>dry_run(allow_major_upgrade : Bool = false, container_names : Array(String) = [] of String)</code></li> <li><code>get_update_summary(allow_major_upgrade : Bool = false, container_names : Array(String) = [] of String)</code></li> </ul>"},{"location":"DESIGN/#4-mangrulloconfig","title":"4. Mangrullo::Config","text":"<ul> <li>Purpose: Configuration management</li> <li>Responsibilities:</li> <li>Parse command line arguments using Docopt</li> <li>Handle container name filtering</li> <li>Default configuration</li> <li>Key Settings:</li> <li><code>interval</code> (check interval in seconds)</li> <li><code>allow_major_upgrade</code> (boolean)</li> <li><code>docker_socket_path</code> (default: \"/var/run/docker.sock\")</li> <li><code>log_level</code></li> <li><code>container_names</code> (array of specific containers to check)</li> <li><code>once</code> (run once and exit)</li> <li><code>dry_run</code> (show what would be updated)</li> </ul>"},{"location":"DESIGN/#5-mangrullotypes","title":"5. Mangrullo::Types","text":"<ul> <li>Purpose: Type definitions</li> <li>Key Structs:</li> <li><code>ContainerInfo</code> - container details</li> <li><code>ImageInfo</code> - image metadata</li> <li><code>Version</code> - semantic version parsing and comparison</li> </ul>"},{"location":"DESIGN/#6-mangrullowebserver-optional","title":"6. Mangrullo::WebServer (Optional)","text":"<ul> <li>Purpose: Web interface for monitoring and management</li> <li>Responsibilities:</li> <li>HTTP server using Kemal</li> <li>Container status dashboard</li> <li>API endpoints for container operations</li> <li>Key Methods:</li> <li><code>start_server</code></li> <li>Container management endpoints</li> <li>Status monitoring</li> </ul>"},{"location":"DESIGN/#7-mangrulloerrorhandling","title":"7. Mangrullo::ErrorHandling","text":"<ul> <li>Purpose: Centralized error management</li> <li>Responsibilities:</li> <li>Consistent error handling across modules</li> <li>User-friendly error messages</li> <li>Graceful degradation</li> </ul>"},{"location":"DESIGN/#main-workflow","title":"Main Workflow","text":"<ol> <li>Initialize:</li> <li>Parse configuration (including container name filtering)</li> <li>Connect to Docker daemon</li> <li> <p>Set up logging</p> </li> <li> <p>Monitor Loop:</p> </li> <li>List running containers (or filter to specific containers)</li> <li> <p>For each container:</p> <ul> <li>Get current image digest</li> <li>Check remote registry for updates</li> <li>Compare versions (respecting major upgrade flag)</li> <li>If update needed: pull image \u2192 recreate container with new image</li> </ul> </li> <li> <p>Container Recreation Process:</p> </li> <li>Stop the running container</li> <li>Remove the old container to free up the name</li> <li>Capture container configuration using <code>docker inspect</code></li> <li>Create new container with same configuration but new image</li> <li>Start the new container</li> <li> <p>Verify the recreation worked</p> </li> <li> <p>Container Name Matching:</p> </li> <li>Support flexible matching (both \"container\" and \"/container\")</li> <li>Normalize input names for consistent comparison</li> <li> <p>Filter containers if specific names provided</p> </li> <li> <p>Scheduling:</p> </li> <li>Run checks at configured intervals</li> <li>Handle graceful shutdown</li> </ol>"},{"location":"DESIGN/#implementation-plan","title":"Implementation Plan","text":""},{"location":"DESIGN/#phase-1-core-infrastructure","title":"Phase 1: Core Infrastructure \u2713","text":"<ol> <li>Add <code>docr</code> and <code>docopt.cr</code> dependencies to shard.yml</li> <li>Implement basic Docker client wrapper</li> <li>Create type definitions</li> </ol>"},{"location":"DESIGN/#phase-2-update-logic","title":"Phase 2: Update Logic \u2713","text":"<ol> <li>Implement image version checking</li> <li>Add major version upgrade logic</li> <li>Create update manager</li> </ol>"},{"location":"DESIGN/#phase-3-application-structure","title":"Phase 3: Application Structure \u2713","text":"<ol> <li>Add configuration system</li> <li>Implement main CLI interface</li> <li>Add logging</li> </ol>"},{"location":"DESIGN/#phase-4-container-recreation","title":"Phase 4: Container Recreation \u2713","text":"<ol> <li>Implement container recreation (not just restart)</li> <li>Add configuration preservation</li> <li>Add verification and error handling</li> </ol>"},{"location":"DESIGN/#phase-5-container-filtering","title":"Phase 5: Container Filtering \u2713","text":"<ol> <li>Add container name filtering</li> <li>Implement flexible name matching</li> <li>Update all methods to support filtering</li> </ol>"},{"location":"DESIGN/#phase-6-multi-registry-support","title":"Phase 6: Multi-Registry Support \u2713","text":"<ol> <li>Add registry authentication</li> <li>Implement lscr.io \u2192 ghcr.io mapping</li> <li>Support multiple registry types</li> </ol>"},{"location":"DESIGN/#phase-7-testing","title":"Phase 7: Testing \u2713","text":"<ol> <li>Unit tests for all modules (56 examples)</li> <li>Integration tests for critical functionality</li> <li>Test edge cases and error conditions</li> </ol>"},{"location":"DESIGN/#phase-8-web-interface-framework","title":"Phase 8: Web Interface (Framework) \u2713","text":"<ol> <li>Add Kemal web framework</li> <li>Create basic web server structure</li> <li>Add web views templates</li> </ol>"},{"location":"DESIGN/#phase-9-documentation-and-polish","title":"Phase 9: Documentation and Polish \u2713","text":"<ol> <li>Update all documentation</li> <li>Add comprehensive examples</li> <li>Finalize error handling</li> </ol>"},{"location":"DESIGN/#configuration-options","title":"Configuration Options","text":""},{"location":"DESIGN/#docopt-usage-string","title":"Docopt Usage String","text":"<pre><code>Mangrullo - Docker container update automation tool\n\nUsage:\n  mangrullo [--interval=&lt;seconds&gt;] [--allow-major] [--socket=&lt;path&gt;] \n           [--log-level=&lt;level&gt;] [--once] [--help] [--version]\n\nOptions:\n  --interval=&lt;seconds&gt;   Check interval in seconds [default: 300]\n  --allow-major          Allow major version upgrades\n  --socket=&lt;path&gt;        Docker socket path [default: /var/run/docker.sock]\n  --log-level=&lt;level&gt;    Log level (debug, info, warn, error) [default: info]\n  --once                 Run once and exit\n  --help                 Show this help message\n  --version              Show version information\n</code></pre> <p>Environment Variables: - <code>MANGRULLO_INTERVAL</code> - <code>MANGRULLO_ALLOW_MAJOR_UPGRADE</code> - <code>MANGRULLO_DOCKER_SOCKET</code> - <code>MANGRULLO_LOG_LEVEL</code></p>"},{"location":"DESIGN/#file-structure","title":"File Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 mangrullo.cr              # Main module and CLI\n\u251c\u2500\u2500 docker_client.cr          # Docker API wrapper\n\u251c\u2500\u2500 image_checker.cr          # Image update logic\n\u251c\u2500\u2500 update_manager.cr         # Update coordination\n\u251c\u2500\u2500 config.cr                 # Configuration management\n\u2514\u2500\u2500 types.cr                  # Type definitions\n\nspec/\n\u251c\u2500\u2500 docker_client_spec.cr\n\u251c\u2500\u2500 image_checker_spec.cr\n\u251c\u2500\u2500 update_manager_spec.cr\n\u251c\u2500\u2500 config_spec.cr\n\u2514\u2500\u2500 types_spec.cr\n</code></pre>"},{"location":"DESIGN/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit Tests: Mock Docker API responses</li> <li>Integration Tests: Use test containers</li> <li>Version Parsing Tests: Edge cases for version comparison</li> <li>Configuration Tests: Argument parsing and environment variables</li> </ul>"},{"location":"DOCKER/","title":"Docker Deployment Guide","text":"<p>This guide explains how to deploy Mangrullo using Docker containers.</p>"},{"location":"DOCKER/#quick-start","title":"Quick Start","text":""},{"location":"DOCKER/#option-1-one-shot-mode-recommended","title":"Option 1: One-shot Mode (Recommended)","text":"<p>Run a single update check:</p> <pre><code>docker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  mangrullo --once\n</code></pre>"},{"location":"DOCKER/#option-2-daemon-mode","title":"Option 2: Daemon Mode","text":"<p>Run Mangrullo as a background daemon that periodically checks for updates:</p> <pre><code>docker run -d \\\n  --name mangrullo \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  mangrullo --interval=300\n</code></pre>"},{"location":"DOCKER/#option-3-dry-run-mode","title":"Option 3: Dry Run Mode","text":"<p>See what would be updated without making changes:</p> <pre><code>docker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  mangrullo --dry-run\n</code></pre>"},{"location":"DOCKER/#option-4-check-specific-containers","title":"Option 4: Check Specific Containers","text":"<p>Check only specific containers:</p> <pre><code>docker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  mangrullo --once flatnotes atuin\n</code></pre>"},{"location":"DOCKER/#docker-compose","title":"Docker Compose","text":"<p>Use the provided <code>docker-compose.yml</code> for easier deployment:</p>"},{"location":"DOCKER/#start-mangrullo","title":"Start Mangrullo","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"DOCKER/#stop-mangrullo","title":"Stop Mangrullo","text":"<pre><code>docker-compose down\n</code></pre>"},{"location":"DOCKER/#view-logs","title":"View Logs","text":"<pre><code>docker-compose logs -f\n</code></pre>"},{"location":"DOCKER/#configuration","title":"Configuration","text":""},{"location":"DOCKER/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>MANGRULLO_DOCKER_SOCKET</code> Docker socket path <code>/var/run/docker.sock</code> <code>MANGRULLO_LOG_LEVEL</code> Log level (debug, info, warn, error) <code>info</code> <code>MANGRULLO_INTERVAL</code> Check interval in seconds <code>3600</code> <code>MANGRULLO_ALLOW_MAJOR</code> Allow major version upgrades <code>false</code>"},{"location":"DOCKER/#example-with-custom-configuration","title":"Example with Custom Configuration","text":"<pre><code>docker run -d \\\n  --name mangrullo \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -e MANGRULLO_LOG_LEVEL=debug \\\n  -e MANGRULLO_INTERVAL=1800 \\\n  -e MANGRULLO_ALLOW_MAJOR=true \\\n  mangrullo daemon\n</code></pre>"},{"location":"DOCKER/#building-the-image","title":"Building the Image","text":"<p>Build the Docker image from source:</p> <pre><code>docker build -t mangrullo .\n</code></pre> <p>Build for a specific platform:</p> <pre><code>docker build -t mangrullo --platform linux/amd64 .\ndocker build -t mangrullo --platform linux/arm64 .\n</code></pre>"},{"location":"DOCKER/#security-considerations","title":"Security Considerations","text":""},{"location":"DOCKER/#docker-socket-access","title":"Docker Socket Access","text":"<p>Mangrullo needs access to the Docker socket to manage containers. This is done with:</p> <pre><code>-v /var/run/docker.sock:/var/run/docker.sock\n</code></pre> <p>Note: Mangrullo needs write access to the Docker socket to recreate containers. The <code>:ro</code> flag cannot be used as it would prevent container operations. If you want to restrict access further, consider:</p> <ol> <li>Using a Docker socket proxy that filters allowed operations</li> <li>Running Mangrullo in a separate Docker network with limited access</li> <li>Using Docker's socket activation with proper permissions</li> </ol>"},{"location":"DOCKER/#non-root-user","title":"Non-root User","text":"<p>The Docker image runs Mangrullo as a non-root user (UID 1000) for improved security.</p>"},{"location":"DOCKER/#monitoring","title":"Monitoring","text":""},{"location":"DOCKER/#logs","title":"Logs","text":"<p>View container logs:</p> <pre><code>docker logs mangrullo\ndocker logs -f mangrullo  # Follow logs\n</code></pre>"},{"location":"DOCKER/#health-checks","title":"Health Checks","text":"<p>Basic container health can be checked with:</p> <pre><code>docker inspect mangrullo --format='{{.State.Status}}'\n</code></pre>"},{"location":"DOCKER/#production-deployment","title":"Production Deployment","text":""},{"location":"DOCKER/#using-docker-swarm","title":"Using Docker Swarm","text":"<pre><code>version: '3.8'\nservices:\n  mangrullo:\n    image: mangrullo:latest\n    deploy:\n      mode: replicated\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      - MANGRULLO_LOG_LEVEL=info\n      - MANGRULLO_INTERVAL=3600\n    networks:\n      - mangrullo-network\n\nnetworks:\n  mangrullo-network:\n    driver: overlay\n</code></pre>"},{"location":"DOCKER/#using-kubernetes","title":"Using Kubernetes","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mangrullo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mangrullo\n  template:\n    metadata:\n      labels:\n        app: mangrullo\n    spec:\n      containers:\n      - name: mangrullo\n        image: mangrullo:latest\n        env:\n        - name: MANGRULLO_LOG_LEVEL\n          value: \"info\"\n        - name: MANGRULLO_INTERVAL\n          value: \"3600\"\n        volumeMounts:\n        - name: docker-socket\n          mountPath: /var/run/docker.sock\n          readOnly: true\n      volumes:\n      - name: docker-socket\n        hostPath:\n          path: /var/run/docker.sock\n</code></pre>"},{"location":"DOCKER/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DOCKER/#permission-denied","title":"Permission Denied","text":"<p>If you get permission denied errors:</p> <pre><code># Add user to docker group on host\nsudo usermod -aG docker $USER\n\n# Or run with elevated privileges\ndocker run --privileged ...\n</code></pre>"},{"location":"DOCKER/#connection-issues","title":"Connection Issues","text":"<p>If Mangrullo can't connect to Docker: 1. Verify Docker is running: <code>docker ps</code> 2. Check socket permissions: <code>ls -la /var/run/docker.sock</code> 3. Ensure the socket is mounted correctly</p>"},{"location":"DOCKER/#advanced-usage","title":"Advanced Usage","text":""},{"location":"DOCKER/#custom-dockerfile","title":"Custom Dockerfile","text":"<p>For custom builds, create a <code>.dockerignore</code> file:</p> <pre><code>.git\n.github\n.spec\nlib/\nbin/\n*.log\n.DS_Store\n</code></pre>"},{"location":"DOCKER/#multi-architecture-builds","title":"Multi-architecture Builds","text":"<p>Build for multiple architectures:</p> <pre><code>docker buildx build --platform linux/amd64,linux/arm64 -t mangrullo:latest .\n</code></pre>"},{"location":"DOCKER/#private-registry","title":"Private Registry","text":"<p>Push to a private registry:</p> <pre><code>docker tag mangrullo:latest my-registry.com/mangrullo:latest\ndocker push my-registry.com/mangrullo:latest\n</code></pre>"},{"location":"UPDATE_ALGORITHM/","title":"Mangrullo Update Detection Algorithm","text":""},{"location":"UPDATE_ALGORITHM/#overview","title":"Overview","text":"<p>Mangrullo uses a simplified, efficient approach to detect when Docker container images need updates. The algorithm clearly separates handling for \"latest\" tags versus versioned tags, optimizing for performance and maintainability.</p>"},{"location":"UPDATE_ALGORITHM/#update-decision-flow","title":"Update Decision Flow","text":""},{"location":"UPDATE_ALGORITHM/#1-tag-type-detection","title":"1. Tag Type Detection","text":"<p>The algorithm first determines the type of image tag:</p> <pre><code>def needs_update?(container : ContainerInfo, allow_major_upgrade : Bool = false) : Bool\n  # If using 'latest' tag, use simple digest comparison\n  if container.image.includes?(\"latest\")\n    return image_has_update?(container.image)\n  end\n\n  # For versioned tags, find available updates based on version\n  current_version = extract_version_from_image(container.image)\n  return false unless current_version\n\n  target_version = find_target_update_version(container.image, current_version, allow_major_upgrade)\n  target_version != nil\nend\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#11-enhanced-update-status-detection","title":"1.1 Enhanced Update Status Detection","text":"<p>For more granular update detection, the algorithm provides detailed status:</p> <pre><code>def get_update_status(container : ContainerInfo) : NamedTuple(needs_pull: Bool, needs_restart: Bool)\n  local_digest = get_local_image_digest(container.image)\n  remote_digest = get_remote_image_digest(container.image)\n\n  {\n    needs_pull: local_digest != remote_digest,\n    needs_restart: local_digest == remote_digest &amp;&amp; container.image.includes?(\"latest\")\n  }\nend\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#2-latest-tag-handling","title":"2. Latest Tag Handling","text":"<p>For images using <code>:latest</code> tags, the algorithm uses simple digest comparison:</p> <pre><code>def image_has_update?(image_name : String) : Bool\n  local_digest = get_local_image_digest(image_name)\n  return false unless local_digest\n\n  remote_digest = get_remote_image_digest(image_name)\n  return false unless remote_digest\n\n  local_digest != remote_digest\nend\n</code></pre> <p>Benefits: - Single API call to get remote manifest digest - No need to parse hundreds or thousands of tags - Fast and efficient</p>"},{"location":"UPDATE_ALGORITHM/#3-versioned-tag-handling","title":"3. Versioned Tag Handling","text":"<p>For images with semantic version tags (e.g., <code>nginx:1.2.3</code>):</p>"},{"location":"UPDATE_ALGORITHM/#31-version-extraction","title":"3.1 Version Extraction","text":"<pre><code>def extract_version_from_image(image_name : String) : Version?\n  # Skip SHA256 digests (they are image IDs, not versioned images)\n  return nil if image_name.starts_with?(\"sha256:\")\n\n  # Extract tag from image name (format: name:tag or name)\n  parts = image_name.split(\":\")\n  tag = parts.size &gt; 1 ? parts.last : \"latest\"\n\n  Version.parse(tag)\nend\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#32-target-version-discovery","title":"3.2 Target Version Discovery","text":"<pre><code>def find_target_update_version(image_name : String, current_version : Version, allow_major_upgrade : Bool) : Version?\n  # Get all available versions from the registry\n  all_versions = get_all_versions(image_name)\n  return nil if all_versions.empty?\n\n  # Filter versions that are newer than current version\n  newer_versions = all_versions.select { |v| v &gt; current_version }\n\n  # Filter by major upgrade preference\n  if allow_major_upgrade\n    # Allow any newer version\n    newer_versions.max?\n  else\n    # Only allow minor/patch updates within the same major version\n    same_major_versions = newer_versions.select { |v| v.major == current_version.major }\n    same_major_versions.max?\n  end\nend\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#33-version-collection","title":"3.3 Version Collection","text":"<pre><code>def get_all_versions(image_name : String) : Array(Version)\n  # Single API call to get all tags\n  response = registry_client.get(\"/v2/#{repository_path}/tags/list\")\n\n  # Parse and filter semantic versions\n  tags = json[\"tags\"].as_a.map(&amp;.as_s)\n  versions = tags.compact_map { |tag| Version.parse(tag) }\n  versions.sort!\nend\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#data-sources","title":"Data Sources","text":""},{"location":"UPDATE_ALGORITHM/#local-information","title":"Local Information","text":"<ul> <li>Docker Daemon via Docr API</li> <li>Container running state and image references</li> <li>Local image digests and metadata</li> </ul>"},{"location":"UPDATE_ALGORITHM/#remote-information","title":"Remote Information","text":"<ul> <li>Registry APIs with authentication support:</li> <li>Docker Hub: <code>registry-1.docker.io</code></li> <li>GitHub Container Registry: <code>ghcr.io</code></li> <li>Other registries: Dynamic detection</li> </ul> <p>Authentication: - JWT token authentication with caching - Support for both Docker Hub and ghcr.io token endpoints - Graceful fallback to unauthenticated requests</p>"},{"location":"UPDATE_ALGORITHM/#message-generation","title":"Message Generation","text":"<p>The algorithm generates clean, user-friendly messages:</p>"},{"location":"UPDATE_ALGORITHM/#latest-tags","title":"Latest Tags","text":"<pre><code>\"Update available for ghcr.io/home-assistant/home-assistant:latest (current: latest)\"\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#versioned-tags","title":"Versioned Tags","text":"<pre><code>\"Version update available: 1.2.0 -&gt; 1.4.5\"\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#key-methods-and-their-roles","title":"Key Methods and Their Roles","text":""},{"location":"UPDATE_ALGORITHM/#core-methods","title":"Core Methods","text":""},{"location":"UPDATE_ALGORITHM/#needs_updatecontainer-allow_major_upgrade","title":"<code>needs_update?(container, allow_major_upgrade)</code>","text":"<p>Main entry point - routes to appropriate detection strategy based on tag type</p>"},{"location":"UPDATE_ALGORITHM/#image_has_updateimage_name","title":"<code>image_has_update?(image_name)</code>","text":"<p>Handles latest tag updates via digest comparison</p>"},{"location":"UPDATE_ALGORITHM/#find_target_update_versionimage_name-current_version-allow_major_upgrade","title":"<code>find_target_update_version(image_name, current_version, allow_major_upgrade)</code>","text":"<p>Finds the best available update version based on current version and upgrade preferences</p>"},{"location":"UPDATE_ALGORITHM/#get_all_versionsimage_name","title":"<code>get_all_versions(image_name)</code>","text":"<p>Performs single API call to get all available versions from registry</p>"},{"location":"UPDATE_ALGORITHM/#extract_version_from_imageimage_name","title":"<code>extract_version_from_image(image_name)</code>","text":"<p>Parses semantic version from image tag</p>"},{"location":"UPDATE_ALGORITHM/#authentication-methods","title":"Authentication Methods","text":""},{"location":"UPDATE_ALGORITHM/#get_registry_tokenregistry_host-repository_path","title":"<code>get_registry_token(registry_host, repository_path)</code>","text":"<p>Fetches JWT tokens for registry authentication with caching</p>"},{"location":"UPDATE_ALGORITHM/#create_authenticated_clientregistry_host-repository_path","title":"<code>create_authenticated_client(registry_host, repository_path)</code>","text":"<p>Creates HTTP client with proper authorization headers</p>"},{"location":"UPDATE_ALGORITHM/#registry-support","title":"Registry Support","text":""},{"location":"UPDATE_ALGORITHM/#supported-registries","title":"Supported Registries","text":"<ul> <li>Docker Hub (<code>registry-1.docker.io</code>)</li> <li>GitHub Container Registry (<code>ghcr.io</code>)</li> <li>Generic registries with standard API v2</li> </ul>"},{"location":"UPDATE_ALGORITHM/#registry-detection","title":"Registry Detection","text":"<pre><code># Automatic registry host detection\nif base_name.includes?(\"/\")\n  parts = base_name.split(\"/\")\n  if parts[0].includes?(\".\") || parts[0].includes?(\":\")\n    registry_host = parts[0]\n    repository_path = parts[1..-1].join(\"/\")\n  end\nend\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#special-mappings","title":"Special Mappings","text":"<ul> <li><code>lscr.io</code> \u2192 redirects to <code>ghcr.io/linuxserver/</code> (with double-prefix prevention)</li> </ul> <p>The algorithm handles the lscr.io to ghcr.io mapping with special logic to avoid double \"linuxserver\" prefixes:</p> <pre><code># Handle special registry mappings\nif registry_host == \"lscr.io\"\n  # lscr.io is a vanity URL that redirects to ghcr.io\n  # Images are actually hosted at ghcr.io/linuxserver\n  registry_host = \"ghcr.io\"\n  # Don't double-prepend linuxserver if it's already there\n  unless repository_path.starts_with?(\"linuxserver/\")\n    repository_path = \"linuxserver/#{repository_path}\"\n  end\nend\n</code></pre>"},{"location":"UPDATE_ALGORITHM/#version-parsing-support","title":"Version Parsing Support","text":""},{"location":"UPDATE_ALGORITHM/#supported-formats","title":"Supported Formats","text":"<ul> <li>Standard semver: <code>1.2.3</code></li> <li>Prereleases: <code>1.2.3-alpha</code>, <code>1.2.3-beta.1</code></li> <li>Build metadata: <code>1.2.3+build.123</code> (ignored in comparison)</li> <li>'v' prefix: <code>v1.2.3</code></li> </ul>"},{"location":"UPDATE_ALGORITHM/#exclusions","title":"Exclusions","text":"<ul> <li><code>latest</code> tags (handled separately)</li> <li>SHA256 digests (image IDs)</li> <li>Non-semantic version strings</li> </ul>"},{"location":"UPDATE_ALGORITHM/#major-upgrade-control","title":"Major Upgrade Control","text":"<p>The <code>allow_major_upgrade</code> parameter controls upgrade behavior: - <code>true</code>: Any version increase (1.2.3 \u2192 2.0.0) - <code>false</code>: Only minor/patch updates (1.2.3 \u2192 1.3.0, NOT 1.2.3 \u2192 2.0.0)</p>"},{"location":"UPDATE_ALGORITHM/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"UPDATE_ALGORITHM/#api-efficiency","title":"API Efficiency","text":"<ul> <li>Latest tags: 2 API calls (local digest + remote manifest)</li> <li>Versioned tags: 1 API call (tags list) + local version parsing</li> <li>No individual tag checking: Eliminated the N+1 query problem</li> </ul>"},{"location":"UPDATE_ALGORITHM/#authentication-caching","title":"Authentication Caching","text":"<ul> <li>JWT tokens cached with 4-minute expiration</li> <li>Reduces authentication overhead for multiple checks</li> </ul>"},{"location":"UPDATE_ALGORITHM/#network-optimization","title":"Network Optimization","text":"<ul> <li>Single HTTP request per image for versioned tags</li> <li>Proper error handling and graceful degradation</li> <li>Minimal external dependencies</li> </ul>"},{"location":"UPDATE_ALGORITHM/#error-handling","title":"Error Handling","text":""},{"location":"UPDATE_ALGORITHM/#graceful-degradation","title":"Graceful Degradation","text":"<ul> <li>Network failures \u2192 return false (no update detected)</li> <li>API errors \u2192 log debug information and continue</li> <li>Authentication failures \u2192 fall back to unauthenticated requests</li> <li>Parsing failures \u2192 skip problematic containers</li> </ul>"},{"location":"UPDATE_ALGORITHM/#resilience-features","title":"Resilience Features","text":"<ul> <li>Rescue blocks around all external API calls</li> <li>Container-level error isolation</li> <li>Comprehensive debug logging</li> <li>Authentication token caching</li> </ul>"},{"location":"UPDATE_ALGORITHM/#security-considerations","title":"Security Considerations","text":""},{"location":"UPDATE_ALGORITHM/#authentication","title":"Authentication","text":"<ul> <li>JWT tokens from official registry endpoints</li> <li>Token caching with proper expiration</li> <li>No hardcoded credentials</li> </ul>"},{"location":"UPDATE_ALGORITHM/#registry-communication","title":"Registry Communication","text":"<ul> <li>HTTPS-only communication</li> <li>Standard Docker Registry API v2</li> <li>Support for private registries with authentication</li> </ul>"},{"location":"UPDATE_ALGORITHM/#future-improvements","title":"Future Improvements","text":""},{"location":"UPDATE_ALGORITHM/#enhanced-registry-support","title":"Enhanced Registry Support","text":"<ul> <li>Additional registry types (GitLab, ECR, GCR)</li> <li>Registry-specific configuration</li> <li>Custom authentication methods</li> </ul>"},{"location":"UPDATE_ALGORITHM/#performance-optimizations","title":"Performance Optimizations","text":"<ul> <li>Parallel container checking</li> <li>Response caching for repeated checks</li> <li>Batch operations for multiple images</li> </ul>"},{"location":"UPDATE_ALGORITHM/#user-experience","title":"User Experience","text":"<ul> <li>More detailed update information</li> <li>Change log integration</li> <li>Security vulnerability reporting</li> </ul>"},{"location":"UPDATE_ALGORITHM/#configuration-options","title":"Configuration Options","text":"<ul> <li>Per-image update policies</li> <li>Custom version filtering rules</li> <li>Registry-specific settings</li> </ul>"},{"location":"WEB_UI_DESIGN/","title":"Mangrullo Web UI Design Document","text":""},{"location":"WEB_UI_DESIGN/#overview","title":"Overview","text":"<p>This document describes the design and implementation plan for a web-based user interface for Mangrullo, a Docker container update automation tool. The web UI will provide a modern, responsive interface for monitoring and managing Docker container updates.</p>"},{"location":"WEB_UI_DESIGN/#goals","title":"Goals","text":"<ol> <li>Visual Monitoring: Provide a dashboard view of all running containers and their update status</li> <li>Interactive Management: Allow users to check for updates, update containers, and view logs</li> <li>Real-time Updates: Show live status updates and notifications</li> <li>Bulk Operations: Enable updating multiple containers at once</li> <li>Mobile Responsive: Work well on both desktop and mobile devices</li> </ol>"},{"location":"WEB_UI_DESIGN/#current-status","title":"Current Status","text":"<p>The web interface is partially implemented with the following components completed:</p>"},{"location":"WEB_UI_DESIGN/#completed-features","title":"\u2705 Completed Features","text":"<ul> <li>Basic Web Server: Kemal-based HTTP server running on port 3000</li> <li>Dashboard Page: Overview of all running containers and their update status</li> <li>Container List: Display of containers with update status indicators</li> <li>Container Details: Individual container management pages</li> <li>Update Checking: Web-based update detection functionality</li> <li>Container Updates: Web-triggered container recreation and updates</li> <li>HTML Templates: Pico.css-based responsive design</li> <li>Error Handling: Graceful error handling and user-friendly messages</li> </ul>"},{"location":"WEB_UI_DESIGN/#in-progress","title":"\ud83d\udea7 In Progress","text":"<ul> <li>Real-time Updates: WebSocket support for live status updates</li> <li>Bulk Operations: Multi-container update functionality</li> <li>Log Viewing: Container log streaming and viewing</li> <li>Container Restart: Direct container restart functionality</li> </ul>"},{"location":"WEB_UI_DESIGN/#planned-features","title":"\ud83d\udccb Planned Features","text":"<ul> <li>Authentication: User authentication and access control</li> <li>Metrics: Performance and usage metrics</li> <li>Scheduling: Web-based update scheduling</li> <li>Notifications: Email/webhook notifications</li> <li>API Documentation: Swagger/OpenAPI documentation</li> </ul>"},{"location":"WEB_UI_DESIGN/#technology-stack","title":"Technology Stack","text":""},{"location":"WEB_UI_DESIGN/#backend","title":"Backend","text":"<ul> <li>Kemal: Fast, lightweight web framework for Crystal</li> <li>Kilt: Template engine for HTML rendering</li> <li>Crystal: High-performance programming language</li> <li>Existing Mangrullo modules: Docker client, image checker, update manager</li> </ul>"},{"location":"WEB_UI_DESIGN/#frontend","title":"Frontend","text":"<ul> <li>Pico.css: Lightweight, semantic CSS framework</li> <li>Vanilla JavaScript: No heavy framework dependencies</li> <li>HTML5: Modern, semantic markup</li> <li>WebSocket: Real-time communication (optional)</li> </ul>"},{"location":"WEB_UI_DESIGN/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Browser      \u2502    \u2502   Kemal Server  \u2502    \u2502   Docker API    \u2502\n\u2502                \u2502    \u2502                \u2502    \u2502                \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502 Pico.css    \u2502 \u2502\u25c4\u2500\u2500\u25ba\u2502 \u2502 Web Server  \u2502 \u2502\u25c4\u2500\u2500\u25ba\u2502 \u2502 Containers  \u2502 \u2502\n\u2502 \u2502 Templates   \u2502 \u2502    \u2502 \u2502 Routes      \u2502 \u2502    \u2502 \u2502 Images      \u2502 \u2502\n\u2502 \u2502 JavaScript  \u2502 \u2502    \u2502 \u2502 API         \u2502 \u2502    \u2502 \u2502 Networks    \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"WEB_UI_DESIGN/#features","title":"Features","text":""},{"location":"WEB_UI_DESIGN/#1-dashboard-main-page","title":"1. Dashboard (Main Page)","text":"<p>URL: <code>/</code></p> <p>Purpose: Overview of all running containers and their update status</p> <p>Components: - Header with app title and navigation - Summary statistics (total containers, updates available) - Container list with:   - Container name and ID   - Current image tag   - Update status indicator   - Last checked timestamp   - Quick actions (Check Update, Update) - Action bar for bulk operations - Real-time status indicators</p> <p>Status Indicators: - \ud83d\udfe2 Up to date - \ud83d\udfe1 Update available - \ud83d\udd34 Unknown/error - \u26aa Latest tag (always check)</p>"},{"location":"WEB_UI_DESIGN/#2-container-details-page","title":"2. Container Details Page","text":"<p>URL: <code>/containers/:id</code></p> <p>Purpose: Detailed view and management of individual containers</p> <p>Components: - Container information (name, ID, image, status) - Version comparison (current vs available) - Update history - Action buttons:   - Check for updates   - Update container   - Restart container   - View logs - Logs viewer with real-time updates - Configuration summary</p>"},{"location":"WEB_UI_DESIGN/#3-api-endpoints","title":"3. API Endpoints","text":""},{"location":"WEB_UI_DESIGN/#container-management","title":"Container Management","text":"<ul> <li><code>GET /api/containers</code> - List all containers</li> <li><code>GET /api/containers/:id</code> - Get container details</li> <li><code>POST /api/containers/:id/check-update</code> - Check for updates</li> <li><code>POST /api/containers/:id/update</code> - Update container</li> <li><code>POST /api/containers/:id/restart</code> - Restart container</li> <li><code>GET /api/containers/:id/logs</code> - Get container logs</li> </ul>"},{"location":"WEB_UI_DESIGN/#bulk-operations","title":"Bulk Operations","text":"<ul> <li><code>GET /api/updates</code> - Check all containers for updates</li> <li><code>POST /api/updates</code> - Update multiple containers</li> </ul>"},{"location":"WEB_UI_DESIGN/#system","title":"System","text":"<ul> <li><code>GET /health</code> - Health check</li> </ul>"},{"location":"WEB_UI_DESIGN/#4-real-time-features-optional","title":"4. Real-time Features (Optional)","text":""},{"location":"WEB_UI_DESIGN/#websocket-support","title":"WebSocket Support","text":"<ul> <li>Live status updates</li> <li>Progress notifications for long-running operations</li> <li>Log streaming</li> </ul>"},{"location":"WEB_UI_DESIGN/#auto-refresh","title":"Auto-refresh","text":"<ul> <li>Periodic status checks</li> <li>Manual refresh button</li> </ul>"},{"location":"WEB_UI_DESIGN/#user-interface-design","title":"User Interface Design","text":""},{"location":"WEB_UI_DESIGN/#color-scheme","title":"Color Scheme","text":"<p>Using Pico.css default color scheme: - Primary: #007bff (blue for actions) - Success: #28a745 (green for up-to-date) - Warning: #ffc107 (yellow for updates available) - Danger: #dc3545 (red for errors) - Light: #f8f9fa (backgrounds) - Dark: #343a40 (text)</p>"},{"location":"WEB_UI_DESIGN/#layout-structure","title":"Layout Structure","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Mangrullo - Docker Container Updates&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;nav&gt;\n      &lt;!-- Navigation --&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;!-- Main content --&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;!-- Footer --&gt;\n  &lt;/footer&gt;\n\n  &lt;script&gt;\n    // JavaScript for interactivity\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"WEB_UI_DESIGN/#component-templates","title":"Component Templates","text":""},{"location":"WEB_UI_DESIGN/#container-card","title":"Container Card","text":"<pre><code>&lt;div class=\"card\"&gt;\n  &lt;article&gt;\n    &lt;header&gt;\n      &lt;h3&gt;Container Name&lt;/h3&gt;\n      &lt;span class=\"status-badge status-update-available\"&gt;Update Available&lt;/span&gt;\n    &lt;/header&gt;\n    &lt;p&gt;&lt;strong&gt;Image:&lt;/strong&gt; nginx:1.2.3&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; Running&lt;/p&gt;\n    &lt;footer&gt;\n      &lt;button onclick=\"checkUpdate('container-id')\"&gt;Check Update&lt;/button&gt;\n      &lt;button onclick=\"updateContainer('container-id')\"&gt;Update&lt;/button&gt;\n    &lt;/footer&gt;\n  &lt;/article&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"WEB_UI_DESIGN/#update-modal","title":"Update Modal","text":"<pre><code>&lt;dialog id=\"update-modal\"&gt;\n  &lt;article&gt;\n    &lt;header&gt;\n      &lt;h3&gt;Update Container&lt;/h3&gt;\n      &lt;button aria-label=\"Close\" rel=\"prev\"&gt;&lt;/button&gt;\n    &lt;/header&gt;\n    &lt;p&gt;Are you sure you want to update this container?&lt;/p&gt;\n    &lt;label&gt;\n      &lt;input type=\"checkbox\" name=\"allow-major\" /&gt;\n      Allow major version upgrades\n    &lt;/label&gt;\n    &lt;footer&gt;\n      &lt;button onclick=\"confirmUpdate()\"&gt;Update&lt;/button&gt;\n      &lt;button onclick=\"closeModal()\" aria-label=\"Close\"&gt;Cancel&lt;/button&gt;\n    &lt;/footer&gt;\n  &lt;/article&gt;\n&lt;/dialog&gt;\n</code></pre>"},{"location":"WEB_UI_DESIGN/#implementation-plan","title":"Implementation Plan","text":""},{"location":"WEB_UI_DESIGN/#phase-1-basic-web-interface","title":"Phase 1: Basic Web Interface \u2713","text":"<ol> <li>[x] Add Kemal dependency</li> <li>[x] Create basic web server structure</li> <li>[x] Implement HTML templates with Pico.css</li> <li>[x] Create dashboard page</li> <li>[x] Add container list view</li> </ol>"},{"location":"WEB_UI_DESIGN/#phase-2-core-functionality","title":"Phase 2: Core Functionality \u2713","text":"<ol> <li>[x] Implement container details page</li> <li>[x] Add update checking functionality</li> <li>[x] Implement container updates</li> <li>[x] Add error handling and validation</li> </ol>"},{"location":"WEB_UI_DESIGN/#phase-3-advanced-features","title":"Phase 3: Advanced Features","text":"<ol> <li>[ ] Add bulk operations</li> <li>[ ] Implement real-time updates (WebSocket)</li> <li>[ ] Add log viewing</li> <li>[ ] Add container restart functionality</li> </ol>"},{"location":"WEB_UI_DESIGN/#phase-4-polish-and-documentation","title":"Phase 4: Polish and Documentation","text":"<ol> <li>[ ] Responsive design improvements</li> <li>[ ] Loading states and spinners</li> <li>[ ] Better error messages</li> <li>[ ] Update documentation</li> </ol>"},{"location":"WEB_UI_DESIGN/#security-considerations","title":"Security Considerations","text":"<ol> <li>Authentication: Currently runs locally, consider adding auth for remote access</li> <li>Authorization: Container operations require appropriate permissions</li> <li>Input Validation: All user input should be validated</li> <li>CSRF Protection: Use tokens for state-changing operations</li> <li>Rate Limiting: Prevent abuse of API endpoints</li> </ol>"},{"location":"WEB_UI_DESIGN/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Caching: Cache Docker API responses where appropriate</li> <li>Pagination: For large numbers of containers</li> <li>Lazy Loading: Load container details on demand</li> <li>Connection Pooling: Reuse Docker client connections</li> </ol>"},{"location":"WEB_UI_DESIGN/#testing-strategy","title":"Testing Strategy","text":"<ol> <li>Unit Tests: Test individual components and utilities</li> <li>Integration Tests: Test API endpoints and Docker integration</li> <li>End-to-End Tests: Test complete user workflows</li> <li>Browser Testing: Test across different browsers and devices</li> </ol>"},{"location":"WEB_UI_DESIGN/#file-structure","title":"File Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 web.cr                 # Web server entry point\n\u251c\u2500\u2500 web_server.cr          # Main web server class\n\u251c\u2500\u2500 web_views.cr           # View templates and rendering\n\u251c\u2500\u2500 public/               # Static assets\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u251c\u2500\u2500 js/\n\u2502   \u2514\u2500\u2500 images/\n\u2514\u2500\u2500 templates/            # HTML templates\n    \u251c\u2500\u2500 layout.ecr\n    \u251c\u2500\u2500 dashboard.ecr\n    \u251c\u2500\u2500 container_details.ecr\n    \u2514\u2500\u2500 partials/\n</code></pre>"},{"location":"WEB_UI_DESIGN/#success-metrics","title":"Success Metrics","text":"<ol> <li>Functionality: All core container operations work via web interface</li> <li>Performance: Page loads in &lt; 2 seconds with 50 containers</li> <li>Usability: Intuitive interface requiring no documentation</li> <li>Reliability: Graceful error handling and recovery</li> <li>Mobile: Responsive design works on mobile devices</li> </ol>"},{"location":"WEB_UI_DESIGN/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>User Authentication: Multi-user support with permissions</li> <li>Scheduled Updates: Web-based scheduling configuration</li> <li>Notifications: Email/webhook notifications</li> <li>Container Metrics: Resource usage graphs</li> <li>Image History: View image update history</li> <li>Export/Import: Configuration backup and restore</li> <li>Themes: Dark/light mode toggle</li> <li>API Documentation: Swagger/OpenAPI documentation</li> </ol>"},{"location":"WEB_UI_DESIGN/#conclusion","title":"Conclusion","text":"<p>The web UI will make Mangrullo more accessible and user-friendly while maintaining the reliability and performance of the core CLI tool. The modular design allows for incremental development and easy extension.</p>"}]}